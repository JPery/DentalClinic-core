package es.jpery.dentalClinic.dao;

import es.jpery.dentalClinic.domain.User;
import org.springframework.stereotype.Repository;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by JPery on 9/11/16.
 */
@Repository
public class UserDAOImpl implements UserDAO {

    private static Connection connection;

    public UserDAOImpl() {
        try {
            Class.forName("org.hsqldb.jdbcDriver");
            connection = DriverManager.getConnection("jdbc:hsqldb:file:./DB", "SA", "");
        } catch (Exception e) {
            System.err.println("ERROR: failed to load HSQLDB JDBC driver.");
            e.printStackTrace();
        }
        createDB();
    }

    private void createDB() {
        try {
            Statement s = connection.createStatement();
            s.executeUpdate("CREATE TABLE IF NOT EXISTS USERS (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0, INCREMENT BY 1) NOT NULL,"
                    + "NAME VARCHAR(40) UNIQUE NOT NULL, "
                    + "PASSWORD VARCHAR(64) NOT NULL, PRIMARY KEY (ID)) ");
            s.executeUpdate("INSERT INTO USERS (name, password) SELECT 'dentist', 'dentist' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users where name='dentist')  LIMIT 1");
            s.executeUpdate("INSERT INTO USERS (name, password) SELECT 'doe', 'john' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users where name='doe')  LIMIT 1");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public User getUserbyID(int id) {
        User user = null;
        try {
            PreparedStatement preparedStatement = connection.prepareStatement("SELECT * FROM USERS WHERE ID = ?;");
            preparedStatement.setInt(1, id);
            ResultSet result = preparedStatement.executeQuery();
            if (result.next())
                user = new User(result.getInt(1), result.getString(2), result.getString(3));
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return user;
    }

    @Override
    public List<User> getUsers() {
        List<User> users = new ArrayList<User>();
        try {
            PreparedStatement preparedStatement = connection.prepareStatement("SELECT * FROM USERS");
            ResultSet result = preparedStatement.executeQuery();
            while (result.next()) {
                User user = new User(result.getInt(1), result.getString(2), result.getString(3));
                users.add(user);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return users;
    }

    @Override
    public boolean checkUser(User userToCheck) {
        User userFromDB = null;
        String username = userToCheck.getName();
        try {
            PreparedStatement preparedStatement = connection.prepareStatement("SELECT * FROM USERS WHERE NAME = ?");
            preparedStatement.setString(1, username);
            ResultSet result = preparedStatement.executeQuery();
            if (result.next())
                userFromDB = new User(result.getInt(1), result.getString(2), result.getString(3));
        } catch (SQLException e) {
            e.printStackTrace();
        }
        if(userFromDB != null && userToCheck.getPassword().equals(userFromDB.getPassword())){
            userToCheck.setId(userFromDB.getId());
            return true;
        }
        return false;
    }

    @Override
    public boolean addUser(User user) {
        try {
            PreparedStatement preparedStatement = connection.prepareStatement("INSERT INTO USERS (name, password) SELECT ?, ? FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users where name = ?)  LIMIT 1");
            String name = user.getName();
            preparedStatement.setString(1, name);
            preparedStatement.setString(2, user.getPassword());
            preparedStatement.setString(3, name);
            return preparedStatement.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public boolean updateUser(int userid, User user) {
        try {
            PreparedStatement preparedStatement = connection.prepareStatement("UPDATE USERS SET id = ?, name = ?, password = ? WHERE id = ?");
            preparedStatement.setInt(1, user.getId());
            preparedStatement.setString(2, user.getName());
            preparedStatement.setString(3, user.getPassword());
            preparedStatement.setInt(4, userid);
            return preparedStatement.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
}
